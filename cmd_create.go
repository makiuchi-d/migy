package main

import (
	"errors"
	"os"
	"path/filepath"
	"text/template"

	"github.com/spf13/cobra"
)

var createNumber int

// cmdCreate represents the create command
var cmdCreate = &cobra.Command{
	Use:   "create [flags] <title>",
	Short: "Create a new pair of up/down SQL migration files",
	Long: `Create a new pair of up/down SQL migration files.
The up file defines the forward migration. The down file contains
the corresponding rollback, ensuring changes can be reversed.`,

	RunE: func(cmd *cobra.Command, args []string) error {
		if len(args) == 0 {
			return errors.New("need title")
		}
		return createNewMigrationFiles(targetDir, createNumber, args[0])
	},
}

func init() {
	cmd.AddCommand(cmdCreate)
	cmdCreate.Flags().IntVarP(&createNumber, "number", "n", 0, "number")
}

const (
	createUpSQL = `-- Generated by migy
INSERT INTO _migrations (id, title, applied) VALUES ({{.Number}}, '{{.Title}}', now());
-- Write your forward migration SQL statements below.
`
	createDownSQL = `-- Generated by migy
CALL _migration_exists({{.Number}});
DELETE FROM _migrations WHERE id = {{.Number}};
-- Write your rollback SQL statements below.
`
)

func createNewMigrationFiles(dir string, num int, title string) error {
	if num == 0 {
		newest, err := NewestMigration(dir)
		if err != nil {
			return err
		}
		num = newest.Number
	}

	mig := Migration{
		Number: num + 1,
		Title:  title,
	}

	err := generateMigrationSQLFile(dir, mig.UpName(), createUpSQL, mig)
	if err != nil {
		return err
	}

	err = generateMigrationSQLFile(dir, mig.DownName(), createDownSQL, mig)
	if err != nil {
		return err
	}

	return nil
}

func generateMigrationSQLFile(dir, name, tmpl string, mig Migration) error {
	f, err := os.OpenFile(filepath.Join(dir, name), os.O_CREATE|os.O_RDWR|os.O_EXCL, 0666)
	if err != nil {
		return err
	}
	defer f.Close()

	t, err := template.New("").Parse(tmpl)
	if err != nil {
		return err
	}

	return t.Execute(f, mig)
}
